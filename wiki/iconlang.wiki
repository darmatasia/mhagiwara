#summary iconlang - new ideographic characters for speed-reading (速読のための新しい表意文字体系)

= Introduction to iconlang （iconlangの紹介）=

What is this? "iconlang" is a new ideographic writing system based on identicon. This maps each English (or any other languages) word into single character, like Chinese, which increases readability, saves a lot of space and time, making it possible for us to read English sentences very rapidly.

"iconlang" は、identicon をベースとした新しい表意文字体系です。英語（もしくは他のあらゆる言語）の単語を、漢字のように、単一の「表意文字」にマッピングします。これによって識別性が向上し、表記スペースや時間も短縮するのため、英語の文を非常に高速に読むことができるようになります。

Now that the computers and the internet is fully widespread, the requirements for "characters" of languages dramatically changed, I suppose. They can be typed, read, but not necessarily be hand-written. "iconlang" is one experimental realization of this idea.

コンピュータやインターネットが発展した現代、言語の「文字」というのもに対する要求も変わってきていると考えています。文字は、タイプできて読めさえすれば、必ずしも手で書ける必要性は無いのです。"iconlang" は、これを実証する実験的な試みです。

= What's identicon? (そもそも identicon とは何か）=

The idea "iconlang" is heavily based on "identicon," which is a graphical representation system of hash values. The original identicon idea is introduced here:

http://www.radiumsoftware.com/0702.html

A python implementation of "iconlang" can be found here, which depends on PIL (Python Image Library):

http://coderepos.org/share/browser/lang/python/misc/identicon.py

= identicon details =

"identicon" algorithm first decodes the input hash value (32 bits) into different bit fragments as below (from LSB to MSB):

(by the way, the above Python implementation has a wrong part. the __decode()__ function should be like this:
{{{
    def decode(self, code):
        # decode the code        
        middleType  = self.MIDDLE_PATCH_SET[code & 0x03]
        middleInvert= (code >> 2) & 0x01
        cornerType  = (code >> 3) & 0x0F
        cornerInvert= (code >> 7) & 0x01
        cornerTurn  = (code >> 8) & 0x03
        sideType    = (code >> 10) & 0x0F
        sideInvert  = (code >> 14) & 0x01
        sideTurn    = (code >> 15) & 0x03
        blue        = (code >> 17) & 0x1F
        green       = (code >> 22) & 0x1F
        red         = (code >> 27) & 0x1F
        ...
}}}

The correspondence table from bit range to each part is below:

||  1- 2 (2) ||   middleType    ||
||     3 (1) ||   middleInvert  ||
||  4- 7 (4) ||   cornerType    ||
||     8 (1) ||   cornerInvert  ||
||  9-10 (2) ||   cornerTurn    ||
|| 11-14 (4) ||   sideType      || 
||    15 (1) ||   sideInvert    ||
|| 16-17 (2) ||   sideTurn      ||
|| 18-22 (5) ||   blue          ||
|| 23-27 (5) ||   green         ||
|| 28-32 (5) ||   red           ||

total = 32 bits

= iconlang details =

||  1- 2 (2) ||   middleType    ||
||     3 (1) ||   middleInvert  ||
||  4- 7 (4) ||   cornerType    ||
||     8 (1) ||   cornerInvert  ||
||  9-10 (2) ||   cornerTurn    ||
|| 11-14 (4) ||   sideType      || 
||    15 (1) ||   sideInvert    ||
|| 16-17 (2) ||   sideTurn      ||
|| 18-20 (3) ||   blue          ||
|| 21-23 (3) ||   green         ||
|| 24-26 (3) ||   red           ||
|| 27-34 (8) ||   corner masks  ||

total = 34 bits